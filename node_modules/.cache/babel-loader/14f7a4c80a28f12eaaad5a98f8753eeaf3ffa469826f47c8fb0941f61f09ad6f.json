{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\todo-app-extension\\\\client\\\\todo-app\\\\src\\\\contexts\\\\user.context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\";\n\n// Creating a Realm App Instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new App(APP_ID);\n\n// Creating a user context to manage and access all the user related functions\n// across different components and pages.\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Function to log in user into our App Service app using their email & password\n  const emailPasswordLogin = async (email, password) => {\n    const credentials = Credentials.emailPassword(email, password);\n    const authenticatedUser = await app.logIn(credentials);\n    setUser(authenticatedUser);\n    return authenticatedUser;\n  };\n\n  // Function to sign up user into our App Service app using their email & password\n  const emailPasswordSignup = async (email, password) => {\n    try {\n      await app.emailPasswordAuth.registerUser(email, password);\n      // Since we are automatically confirming our users, we are going to log in\n      // the user using the same credentials once the signup is complete.\n      return emailPasswordLogin(email, password);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to fetch the user (if the user is already logged in) from local storage\n  const fetchUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.refreshCustomData();\n      // Now, if we have a user, we are setting it to our user context\n      // so that we can use it in our app across different components.\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Function to logout user from our App Services app\n  const logOutUser = async () => {\n    if (!app.currentUser) return false;\n    try {\n      await app.currentUser.logOut();\n      // Setting the user to null once loggedOut.\n      setUser(null);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      fetchUser,\n      emailPasswordLogin,\n      emailPasswordSignup,\n      logOutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useState","App","Credentials","APP_ID","jsxDEV","_jsxDEV","app","UserContext","UserProvider","children","_s","user","setUser","emailPasswordLogin","email","password","credentials","emailPassword","authenticatedUser","logIn","emailPasswordSignup","emailPasswordAuth","registerUser","error","fetchUser","currentUser","refreshCustomData","logOutUser","logOut","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/pc/todo-app-extension/client/todo-app/src/contexts/user.context.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { App, Credentials } from \"realm-web\";\r\nimport { APP_ID } from \"../realm/constants\";\r\n \r\n// Creating a Realm App Instance\r\nconst app = new App(APP_ID);\r\n \r\n// Creating a user context to manage and access all the user related functions\r\n// across different components and pages.\r\nexport const UserContext = createContext();\r\n \r\nexport const UserProvider = ({ children }) => {\r\n const [user, setUser] = useState(null);\r\n \r\n // Function to log in user into our App Service app using their email & password\r\n const emailPasswordLogin = async (email, password) => {\r\n   const credentials = Credentials.emailPassword(email, password);\r\n   const authenticatedUser = await app.logIn(credentials);\r\n   setUser(authenticatedUser);\r\n   return authenticatedUser;\r\n };\r\n \r\n // Function to sign up user into our App Service app using their email & password\r\n const emailPasswordSignup = async (email, password) => {\r\n   try {\r\n     await app.emailPasswordAuth.registerUser(email, password);\r\n     // Since we are automatically confirming our users, we are going to log in\r\n     // the user using the same credentials once the signup is complete.\r\n     return emailPasswordLogin(email, password);\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n };\r\n \r\n // Function to fetch the user (if the user is already logged in) from local storage\r\n const fetchUser = async () => {\r\n   if (!app.currentUser) return false;\r\n   try {\r\n     await app.currentUser.refreshCustomData();\r\n     // Now, if we have a user, we are setting it to our user context\r\n     // so that we can use it in our app across different components.\r\n     setUser(app.currentUser);\r\n     return app.currentUser;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }\r\n \r\n // Function to logout user from our App Services app\r\n const logOutUser = async () => {\r\n   if (!app.currentUser) return false;\r\n   try {\r\n     await app.currentUser.logOut();\r\n     // Setting the user to null once loggedOut.\r\n     setUser(null);\r\n     return true;\r\n   } catch (error) {\r\n     throw error\r\n   }\r\n }\r\n \r\n return <UserContext.Provider value={{ user, setUser, fetchUser, emailPasswordLogin, emailPasswordSignup, logOutUser }}>\r\n   {children}\r\n </UserContext.Provider>;\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,GAAG,EAAEC,WAAW,QAAQ,WAAW;AAC5C,SAASC,MAAM,QAAQ,oBAAoB;;AAE3C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,GAAG,GAAG,IAAIL,GAAG,CAACE,MAAM,CAAC;;AAE3B;AACA;AACA,OAAO,MAAMI,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMS,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMa,kBAAkB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACpD,MAAMC,WAAW,GAAGd,WAAW,CAACe,aAAa,CAACH,KAAK,EAAEC,QAAQ,CAAC;IAC9D,MAAMG,iBAAiB,GAAG,MAAMZ,GAAG,CAACa,KAAK,CAACH,WAAW,CAAC;IACtDJ,OAAO,CAACM,iBAAiB,CAAC;IAC1B,OAAOA,iBAAiB;EAC1B,CAAC;;EAED;EACA,MAAME,mBAAmB,GAAG,MAAAA,CAAON,KAAK,EAAEC,QAAQ,KAAK;IACrD,IAAI;MACF,MAAMT,GAAG,CAACe,iBAAiB,CAACC,YAAY,CAACR,KAAK,EAAEC,QAAQ,CAAC;MACzD;MACA;MACA,OAAOF,kBAAkB,CAACC,KAAK,EAAEC,QAAQ,CAAC;IAC5C,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI,CAAClB,GAAG,CAACmB,WAAW,EAAE,OAAO,KAAK;IAClC,IAAI;MACF,MAAMnB,GAAG,CAACmB,WAAW,CAACC,iBAAiB,CAAC,CAAC;MACzC;MACA;MACAd,OAAO,CAACN,GAAG,CAACmB,WAAW,CAAC;MACxB,OAAOnB,GAAG,CAACmB,WAAW;IACxB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;;EAED;EACA,MAAMI,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACrB,GAAG,CAACmB,WAAW,EAAE,OAAO,KAAK;IAClC,IAAI;MACF,MAAMnB,GAAG,CAACmB,WAAW,CAACG,MAAM,CAAC,CAAC;MAC9B;MACAhB,OAAO,CAAC,IAAI,CAAC;MACb,OAAO,IAAI;IACb,CAAC,CAAC,OAAOW,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,oBAAOlB,OAAA,CAACE,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEnB,IAAI;MAAEC,OAAO;MAAEY,SAAS;MAAEX,kBAAkB;MAAEO,mBAAmB;MAAEO;IAAW,CAAE;IAAAlB,QAAA,EACnHA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AACxB,CAAC;AAAAxB,EAAA,CArDYF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}