{"ast":null,"code":"import{Button,TextField}from\"@mui/material\";import{useContext,useEffect,useState}from\"react\";import{Link,useLocation,useNavigate}from\"react-router-dom\";import{UserContext}from\"../contexts/user.context\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Login=()=>{const navigate=useNavigate();const location=useLocation();// We are consuming our user-management context to\n// get & set the user details here\nconst{user,fetchUser,emailPasswordLogin}=useContext(UserContext);// We are using React's \"useState\" hook to keep track\n//  of the form values.\nconst[form,setForm]=useState({email:\"\",password:\"\"});// This function will be called whenever the user edits the form.\nconst onFormInputChange=event=>{const{name,value}=event.target;setForm({...form,[name]:value});};// This function will redirect the user to the\n// appropriate page once the authentication is done.\nconst redirectNow=()=>{const redirectTo=location.search.replace(\"?redirectTo=\",\"\");navigate(redirectTo?redirectTo:\"/\");};// Once a user logs in to our app, we don’t want to ask them for their\n// credentials again every time the user refreshes or revisits our app, \n// so we are checking if the user is already logged in and\n// if so we are redirecting the user to the home page.\n// Otherwise we will do nothing and let the user to login.\nconst loadUser=async()=>{if(!user){const fetchedUser=await fetchUser();if(fetchedUser){// Redirecting them once fetched.\nredirectNow();}}};// This useEffect will run only once when the component is mounted.\n// Hence this is helping us in verifying whether the user is already logged in\n// or not.\nuseEffect(()=>{loadUser();// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);// This function gets fired when the user clicks on the \"Login\" button.\nconst onSubmit=async event=>{try{// Here we are passing user details to our emailPasswordLogin\n// function that we imported from our realm/authentication.js\n// to validate the user credentials and log in the user into our App.\nconst user=await emailPasswordLogin(form.email,form.password);if(user){redirectNow();}}catch(error){if(error.statusCode===401){alert(\"Invalid username/password. Try again!\");}else{alert(error);}}};return/*#__PURE__*/_jsxs(\"form\",{style:{display:\"flex\",flexDirection:\"column\",maxWidth:\"300px\",margin:\"auto\"},children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Login\"}),/*#__PURE__*/_jsx(TextField,{label:\"Email\",type:\"email\",variant:\"outlined\",name:\"email\",value:form.email,onChange:onFormInputChange,style:{marginBottom:\"1rem\"}}),/*#__PURE__*/_jsx(TextField,{label:\"Password\",type:\"password\",variant:\"outlined\",name:\"password\",value:form.password,onChange:onFormInputChange,style:{marginBottom:\"1rem\"}}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:onSubmit,children:\"Login\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Don't have an account? \",/*#__PURE__*/_jsx(Link,{to:\"/signup\",children:\"Signup\"})]})]});};export default Login;","map":{"version":3,"names":["Button","TextField","useContext","useEffect","useState","Link","useLocation","useNavigate","UserContext","jsx","_jsx","jsxs","_jsxs","Login","navigate","location","user","fetchUser","emailPasswordLogin","form","setForm","email","password","onFormInputChange","event","name","value","target","redirectNow","redirectTo","search","replace","loadUser","fetchedUser","onSubmit","error","statusCode","alert","style","display","flexDirection","maxWidth","margin","children","label","type","variant","onChange","marginBottom","color","onClick","to"],"sources":["C:/Users/pc/todo-app-extension/client/todo-app/src/pages/Login.page.js"],"sourcesContent":["import { Button, TextField } from \"@mui/material\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { UserContext } from \"../contexts/user.context\";\r\n \r\nconst Login = () => {\r\n const navigate = useNavigate();\r\n const location = useLocation();\r\n \r\n // We are consuming our user-management context to\r\n // get & set the user details here\r\n const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\r\n \r\n // We are using React's \"useState\" hook to keep track\r\n //  of the form values.\r\n const [form, setForm] = useState({\r\n   email: \"\",\r\n   password: \"\"\r\n });\r\n \r\n // This function will be called whenever the user edits the form.\r\n const onFormInputChange = (event) => {\r\n   const { name, value } = event.target;\r\n   setForm({ ...form, [name]: value });\r\n };\r\n \r\n // This function will redirect the user to the\r\n // appropriate page once the authentication is done.\r\n const redirectNow = () => {\r\n   const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\r\n   navigate(redirectTo ? redirectTo : \"/\");\r\n }\r\n \r\n // Once a user logs in to our app, we don’t want to ask them for their\r\n // credentials again every time the user refreshes or revisits our app, \r\n // so we are checking if the user is already logged in and\r\n // if so we are redirecting the user to the home page.\r\n // Otherwise we will do nothing and let the user to login.\r\n const loadUser = async () => {\r\n   if (!user) {\r\n     const fetchedUser = await fetchUser();\r\n     if (fetchedUser) {\r\n       // Redirecting them once fetched.\r\n       redirectNow();\r\n     }\r\n   }\r\n }\r\n \r\n // This useEffect will run only once when the component is mounted.\r\n // Hence this is helping us in verifying whether the user is already logged in\r\n // or not.\r\n useEffect(() => {\r\n   loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\r\n }, []);\r\n \r\n // This function gets fired when the user clicks on the \"Login\" button.\r\n const onSubmit = async (event) => {\r\n   try {\r\n     // Here we are passing user details to our emailPasswordLogin\r\n     // function that we imported from our realm/authentication.js\r\n     // to validate the user credentials and log in the user into our App.\r\n     const user = await emailPasswordLogin(form.email, form.password);\r\n     if (user) {\r\n       redirectNow();\r\n     }\r\n   } catch (error) {\r\n       if (error.statusCode === 401) {\r\n          alert(\"Invalid username/password. Try again!\");\r\n      } else {\r\n          alert(error);\r\n      }\r\n \r\n   }\r\n };\r\n \r\n return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\r\n   <h1>Login</h1>\r\n   <TextField\r\n     label=\"Email\"\r\n     type=\"email\"\r\n     variant=\"outlined\"\r\n     name=\"email\"\r\n     value={form.email}\r\n     onChange={onFormInputChange}\r\n     style={{ marginBottom: \"1rem\" }}\r\n   />\r\n   <TextField\r\n     label=\"Password\"\r\n     type=\"password\"\r\n     variant=\"outlined\"\r\n     name=\"password\"\r\n     value={form.password}\r\n     onChange={onFormInputChange}\r\n     style={{ marginBottom: \"1rem\" }}\r\n   />\r\n   <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n     Login\r\n   </Button>\r\n   <p>Don't have an account? <Link to=\"/signup\">Signup</Link></p>\r\n </form>\r\n}\r\n \r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}