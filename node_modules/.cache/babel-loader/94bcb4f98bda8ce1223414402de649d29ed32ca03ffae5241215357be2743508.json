{"ast":null,"code":"import{createContext,useState}from\"react\";import{App,Credentials}from\"realm-web\";import{APP_ID}from\"../realm/constants\";// Creating a Realm App Instance\nimport{jsx as _jsx}from\"react/jsx-runtime\";const app=new App(APP_ID);// Creating a user context to manage and access all the user related functions\n// across different components and pages.\nexport const UserContext=/*#__PURE__*/createContext();export const UserProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);// Function to log in user into our App Service app using their email & password\nconst emailPasswordLogin=async(email,password)=>{const credentials=Credentials.emailPassword(email,password);const authenticatedUser=await app.logIn(credentials);setUser(authenticatedUser);return authenticatedUser;};// Function to sign up user into our App Service app using their email & password\nconst emailPasswordSignup=async(email,password)=>{try{await app.emailPasswordAuth.registerUser(email,password);// Since we are automatically confirming our users, we are going to log in\n// the user using the same credentials once the signup is complete.\nreturn emailPasswordLogin(email,password);}catch(error){throw error;}};// Function to fetch the user (if the user is already logged in) from local storage\nconst fetchUser=async()=>{if(!app.currentUser)return false;try{await app.currentUser.refreshCustomData();// Now, if we have a user, we are setting it to our user context\n// so that we can use it in our app across different components.\nsetUser(app.currentUser);return app.currentUser;}catch(error){throw error;}};// Function to logout user from our App Services app\nconst logOutUser=async()=>{if(!app.currentUser)return false;try{await app.currentUser.logOut();// Setting the user to null once loggedOut.\nsetUser(null);return true;}catch(error){throw error;}};return/*#__PURE__*/_jsx(UserContext.Provider,{value:{user,setUser,fetchUser,emailPasswordLogin,emailPasswordSignup,logOutUser},children:children});};","map":{"version":3,"names":["createContext","useState","App","Credentials","APP_ID","jsx","_jsx","app","UserContext","UserProvider","_ref","children","user","setUser","emailPasswordLogin","email","password","credentials","emailPassword","authenticatedUser","logIn","emailPasswordSignup","emailPasswordAuth","registerUser","error","fetchUser","currentUser","refreshCustomData","logOutUser","logOut","Provider","value"],"sources":["C:/Users/pc/todo-app-extension/client/todo-app/src/contexts/user.context.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { App, Credentials } from \"realm-web\";\r\nimport { APP_ID } from \"../realm/constants\";\r\n \r\n// Creating a Realm App Instance\r\nconst app = new App(APP_ID);\r\n \r\n// Creating a user context to manage and access all the user related functions\r\n// across different components and pages.\r\nexport const UserContext = createContext();\r\n \r\nexport const UserProvider = ({ children }) => {\r\n const [user, setUser] = useState(null);\r\n \r\n // Function to log in user into our App Service app using their email & password\r\n const emailPasswordLogin = async (email, password) => {\r\n   const credentials = Credentials.emailPassword(email, password);\r\n   const authenticatedUser = await app.logIn(credentials);\r\n   setUser(authenticatedUser);\r\n   return authenticatedUser;\r\n };\r\n \r\n // Function to sign up user into our App Service app using their email & password\r\n const emailPasswordSignup = async (email, password) => {\r\n   try {\r\n     await app.emailPasswordAuth.registerUser(email, password);\r\n     // Since we are automatically confirming our users, we are going to log in\r\n     // the user using the same credentials once the signup is complete.\r\n     return emailPasswordLogin(email, password);\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n };\r\n \r\n // Function to fetch the user (if the user is already logged in) from local storage\r\n const fetchUser = async () => {\r\n   if (!app.currentUser) return false;\r\n   try {\r\n     await app.currentUser.refreshCustomData();\r\n     // Now, if we have a user, we are setting it to our user context\r\n     // so that we can use it in our app across different components.\r\n     setUser(app.currentUser);\r\n     return app.currentUser;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }\r\n \r\n // Function to logout user from our App Services app\r\n const logOutUser = async () => {\r\n   if (!app.currentUser) return false;\r\n   try {\r\n     await app.currentUser.logOut();\r\n     // Setting the user to null once loggedOut.\r\n     setUser(null);\r\n     return true;\r\n   } catch (error) {\r\n     throw error\r\n   }\r\n }\r\n \r\n return <UserContext.Provider value={{ user, setUser, fetchUser, emailPasswordLogin, emailPasswordSignup, logOutUser }}>\r\n   {children}\r\n </UserContext.Provider>;\r\n}"],"mappings":"AAAA,OAASA,aAAa,CAAEC,QAAQ,KAAQ,OAAO,CAC/C,OAASC,GAAG,CAAEC,WAAW,KAAQ,WAAW,CAC5C,OAASC,MAAM,KAAQ,oBAAoB,CAE3C;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAL,GAAG,CAACE,MAAM,CAAC,CAE3B;AACA;AACA,MAAO,MAAM,CAAAI,WAAW,cAAGR,aAAa,CAAC,CAAC,CAE1C,MAAO,MAAM,CAAAS,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAEtC;AACA,KAAM,CAAAa,kBAAkB,CAAG,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CACpD,KAAM,CAAAC,WAAW,CAAGd,WAAW,CAACe,aAAa,CAACH,KAAK,CAAEC,QAAQ,CAAC,CAC9D,KAAM,CAAAG,iBAAiB,CAAG,KAAM,CAAAZ,GAAG,CAACa,KAAK,CAACH,WAAW,CAAC,CACtDJ,OAAO,CAACM,iBAAiB,CAAC,CAC1B,MAAO,CAAAA,iBAAiB,CAC1B,CAAC,CAED;AACA,KAAM,CAAAE,mBAAmB,CAAG,KAAAA,CAAON,KAAK,CAAEC,QAAQ,GAAK,CACrD,GAAI,CACF,KAAM,CAAAT,GAAG,CAACe,iBAAiB,CAACC,YAAY,CAACR,KAAK,CAAEC,QAAQ,CAAC,CACzD;AACA;AACA,MAAO,CAAAF,kBAAkB,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAC5C,CAAE,MAAOQ,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,KAAM,CAAAC,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CAAClB,GAAG,CAACmB,WAAW,CAAE,MAAO,MAAK,CAClC,GAAI,CACF,KAAM,CAAAnB,GAAG,CAACmB,WAAW,CAACC,iBAAiB,CAAC,CAAC,CACzC;AACA;AACAd,OAAO,CAACN,GAAG,CAACmB,WAAW,CAAC,CACxB,MAAO,CAAAnB,GAAG,CAACmB,WAAW,CACxB,CAAE,MAAOF,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,KAAM,CAAAI,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CAACrB,GAAG,CAACmB,WAAW,CAAE,MAAO,MAAK,CAClC,GAAI,CACF,KAAM,CAAAnB,GAAG,CAACmB,WAAW,CAACG,MAAM,CAAC,CAAC,CAC9B;AACAhB,OAAO,CAAC,IAAI,CAAC,CACb,MAAO,KAAI,CACb,CAAE,MAAOW,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,mBAAOlB,IAAA,CAACE,WAAW,CAACsB,QAAQ,EAACC,KAAK,CAAE,CAAEnB,IAAI,CAAEC,OAAO,CAAEY,SAAS,CAAEX,kBAAkB,CAAEO,mBAAmB,CAAEO,UAAW,CAAE,CAAAjB,QAAA,CACnHA,QAAQ,CACW,CAAC,CACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}